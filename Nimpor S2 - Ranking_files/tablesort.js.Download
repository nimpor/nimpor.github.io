function sortTableByColumn(table, column, asc = true) {
    const dirModifier = asc ? 1 : -1;
    const tBody = table.tBodies[0];
    const rows = Array.from(tBody.querySelectorAll("tr"));

    if (column == 0) {
        return
    }
    // Sort each row
    const sortedRows = rows.sort((a, b) => {
        const aValue = parseFloat(a.querySelector(`td:nth-child(${column + 1})`).title);
        const bValue = parseFloat(b.querySelector(`td:nth-child(${column + 1})`).title);

        if (isNaN(aValue)) {
            return 1;
        }
        if (isNaN(bValue)) {
            return -1;
        }

        return (aValue - bValue) * dirModifier;
    });

    // Remove all existing TRs from the table
    while (tBody.firstChild) {
        tBody.removeChild(tBody.firstChild);
    }

    // Re-add the newly sorted rows
    tBody.append(...sortedRows);

    // Remember how the column is currently sorted
    table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
    table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-asc", asc);
    table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th").forEach(headerCell => {
    headerCell.addEventListener("click", () => {
        const tableElement = headerCell.parentElement.parentElement.parentElement;
        const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
        const currentIsAscending = headerCell.classList.contains("th-sort-asc");

        sortTableByColumn(tableElement, headerIndex, !currentIsAscending);

    });
});

window.onload = function () {
    var table = document.getElementById("meineTabelle");
    var rows = table.rows;
    var numColumns = rows[0].cells.length;
    if (rows.length > 2) {
        for (var col = 0; col < numColumns; col++) {
            var cellValues = [];
            var highestValue = Number.MIN_VALUE;
            var highestRowIndex = [];
            var lowestValue = Number.MAX_VALUE;
            var lowestRowIndex = [];

            for (var row = 0; row < rows.length; row++) {
                var cellValue = parseInt(rows[row].cells[col].title);
                if (cellValue < 0) {
                    continue;
                }

                cellValues.push(cellValue);

                if (cellValue > highestValue) {
                    highestValue = cellValue;
                    highestRowIndex = [row];
                } else if (cellValue === highestValue) {
                    highestRowIndex.push(row);
                }

                if (cellValue < lowestValue) {
                    lowestValue = cellValue;
                    lowestRowIndex = [row];
                } else if (cellValue === lowestValue) {
                    lowestRowIndex.push(row);
                }
            }

            var uniqueValues = Array.from(new Set(cellValues));
            if (uniqueValues.length === 1) {
                // Multiple cells have the same value, do nothing
                continue;
            }

            if (col !== 3) {
                if (highestRowIndex.length > 0) {
                    highestRowIndex.forEach(function (index) {
                        rows[index].cells[col].classList.add("bg-success");
                    });
                }

                if (lowestRowIndex.length > 0) {
                    lowestRowIndex.forEach(function (index) {
                        rows[index].cells[col].classList.add("bg-danger");
                    });
                }
            } else {
                if (highestRowIndex.length > 0) {
                    highestRowIndex.forEach(function (index) {
                        rows[index].cells[col].classList.add("bg-danger");
                    });
                }

                if (lowestRowIndex.length > 0) {
                    lowestRowIndex.forEach(function (index) {
                        rows[index].cells[col].classList.add("bg-success");
                    });
                }
            }
        }
    }
};
